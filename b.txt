local accountId = 48523;
local allowPassThrough = false; 
local allowKeyRedeeming = false; 
local useDataModel = false;
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local folderName = "SakuraHub"
local fileName = "key.txt"

local Window = Fluent:CreateWindow({
    Title = "Sakura Hub | Key System",
    SubTitle = "It's only one checkpoint!",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = true, 
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl 
})

local Tabs = {
    Key = Window:AddTab({ Title = "Key System", Icon = "" }),
}


local onMessage = function(message)
    Fluent:Notify({
        Title = "Sakura Hub",
        Content = message,
        SubContent = "",
        Duration = 5
    })
end;

local fRequest, fStringFormat, fSpawn, fWait = request or http.request or http_request or syn.request, string.format, task.spawn, task.wait;
local localPlayerId = game:GetService("Players").LocalPlayer.UserId;
local rateLimit, rateLimitCountdown, errorWait = false, 0, false;

function getLink()
    return string.format("https://gateway.platoboost.com/a/%i?id=%i", accountId, localPlayerId)
end;

function verify(key)
    if errorWait or rateLimit then 
        return false;
    end;

    onMessage("Checking key...");

    if (useDataModel) then
        local status, result = pcall(function() 
            return game:HttpGetAsync(fStringFormat("https://api-gateway.platoboost.com/v1/public/whitelist/%i/%i?key=%s", accountId, localPlayerId, key));
        end);
        
        if status then
            if string.find(result, "true") then
                onMessage("Successfully whitelisted!");
                --loadstring(game:HttpGet(""))()
                Window:Destroy()
                return true;
            elseif string.find(result, "false") then
                if allowKeyRedeeming then
                    local status1, result1 = pcall(function()
                        return game:HttpPostAsync(fStringFormat("https://api-gateway.platoboost.com/v1/authenticators/redeem/%i/%i/%s", accountId, localPlayerId, key), {});
                    end);

                    if status1 then
                        if string.find(result1, "true") then
                            onMessage("Successfully redeemed key!");
                            --loadstring(game:HttpGet(""))()
                            Window:Destroy()
                            return true;
                        end;
                    end;
                end;
                
                onMessage("Key is invalid!");
                return false;
            else
                return false;
            end;
        else
            onMessage("An error occured while contacting the server!");
            return allowPassThrough;
        end;
    else
        local status, result = pcall(function() 
            return fRequest({
                Url = fStringFormat("https://api-gateway.platoboost.com/v1/public/whitelist/%i/%i?key=%s", accountId, localPlayerId, key),
                Method = "GET"
            });
        end);

        if status then
            if result.StatusCode == 200 then
                if string.find(result.Body, "true") then
                    onMessage("Successfully whitelisted key!");
                    return true;
                else
                    if (allowKeyRedeeming) then
                        local status1, result1 = pcall(function() 
                            return fRequest({
                                Url = fStringFormat("https://api-gateway.platoboost.com/v1/authenticators/redeem/%i/%i/%s", accountId, localPlayerId, key),
                                Method = "POST"
                            });
                        end);

                        if status1 then
                            if result1.StatusCode == 200 then
                                if string.find(result1.Body, "true") then
                                    onMessage("Successfully redeemed key!");
                                    --loadstring(game:HttpGet(""))()
                                    Window:Destroy()
                                    return true;
                                end;
                            end;
                        end;
                    end;
                    
                    return false;
                end;
            elseif result.StatusCode == 204 then
                onMessage("Account wasn't found, check accountId");
                return false;
            elseif result.StatusCode == 429 then
                if not rateLimit then 
                    rateLimit = true;
                    rateLimitCountdown = 10;
                    fSpawn(function() 
                        while rateLimit do
                            onMessage(fStringFormat("You are being rate-limited, please slow down. Try again in %i second(s).", rateLimitCountdown));
                            fWait(1);
                            rateLimitCountdown = rateLimitCountdown - 1;
                            if rateLimitCountdown < 0 then
                                rateLimit = false;
                                rateLimitCountdown = 0;
                                onMessage("Rate limit is over, please try again.");
                            end;
                        end;
                    end); 
                end;
            else
                return allowPassThrough;
            end;    
        else
            return allowPassThrough;
        end;
    end;
end;

local function SaveKey(key)
    local folder = Workspace:FindFirstChild(folderName) or Instance.new("Folder", Workspace)
    folder.Name = folderName

    local keyFile = folder:FindFirstChild(fileName) or Instance.new("StringValue", folder)
    keyFile.Name = fileName
    keyFile.Value = key
end

local function LoadSavedKey()
    local folder = Workspace:FindFirstChild(folderName)
    if folder then
        local keyFile = folder:FindFirstChild(fileName)
        if keyFile then
            return keyFile.Value
        end
    end
    return nil
end

getgenv().key = LoadSavedKey()

local KeyTextBox = Tabs.Key:AddInput("Input", {
    Title = "Enter your key!",
    Default = "Your Key Here",
    Placeholder = "Placeholder",
    Numeric = false,
    Finished = true,
    Callback = function(Value)
        verify(Value)
    end
})

Tabs.Key:AddButton({
    Title = "Get Key!",
    Description = "Its just one checkpoint!",
    Callback = function()
    local link = getLink()
        onMessage("Key copied to clipboard!")
        setclipboard(link)
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("SakuraHub")
SaveManager:SetFolder("SakuraHub/key")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()
